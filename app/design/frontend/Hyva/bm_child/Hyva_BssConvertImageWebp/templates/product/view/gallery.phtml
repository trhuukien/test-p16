<?php
/**
 * BSS Commerce Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://bsscommerce.com/Bss-Commerce-License.txt
 *
 * @category  BSS
 * @package   Hyva_BssConvertImageWebp
 * @author    Extension Team
 * @copyright Copyright (c) 2022 BSS Commerce Co. ( http://bsscommerce.com )
 * @license   http://bsscommerce.com/Bss-Commerce-License.txt
 */

declare(strict_types=1);

use Hyva\BssConvertImageWebp\ViewModel\Webp;
use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsOutline;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Magento\Catalog\Block\Product\View\Gallery;
use Magento\Framework\Escaper;

// @codingStandardsIgnoreFile
/** @var Escaper $escaper */
/** @var Gallery $block */
/** @var ViewModelRegistry $viewModels */
/** @var HeroiconsOutline $heroicons */

$heroicons = $viewModels->require(HeroiconsOutline::class);

/** @var HeroiconsSolid $heroiconsSolid */
$heroiconsSolid = $viewModels->require(HeroiconsSolid::class);

$viewModelWebp = $viewModels->require(Webp::class);

$images = $block->getGalleryImages()->getItems();

$mainImage = current(array_filter($images, [$block, 'isMainImage']));

if (!empty($images) && empty($mainImage)) {
    $mainImage = reset($images);
}

$smallWidth = $block->getImageAttribute('product_page_image_small', 'width', 90);
$smallHeight = $block->getImageAttribute('product_page_image_small', 'height', 90);
$mediumWidth = $block->getImageAttribute('product_page_image_medium', 'width', 700);
$mediumHeight = $block->getImageAttribute('product_page_image_medium', 'height', 700);


$smallWidth = 90;
$smallHeight = 90;
$mediumWidth = 535;
$mediumHeight = 535;

$productName = $block->getProduct()->getName();
$mainImage = current(array_filter($images, [$block, 'isMainImage']));

$urlWebpMedium = $viewModelWebp->getUrlWebpMedium($images, $block->getData("imageHelper"), $mainImage);

?>
<div id="gallery"
     x-data="initGallery()"
     x-init="initActive(); $nextTick(() => calcPageSize()); replaceUrl(images)"
     x-bind="eventListeners"
     class="w-full md:pt-0 md:h-auto md:row-start-1 md:row-span-2 md:col-start-1"
>
    <div  :class="{'w-full h-full fixed top-0 left-0 bg-white z-70 block': fullscreen}">
        <div class="relative self-center w-full"
             x-transition:enter="ease-out duration-500"
             x-transition:enter-start="opacity-0"
             x-transition:enter-end="opacity-100"
        >
            <div class="absolute top-0 right-0 pt-4 pr-4 z-50">
                <button @click="fullscreen = false; $nextTick(() => calcPageSize())"
                        type="button"
                        class="hidden text-gray-400 hover:text-gray-500 focus:outline-none focus:text-gray-500
                        transition ease-in-out duration-150 btn-image-close-fullscreen"
                        :class="{ 'hidden': !fullscreen, 'block': fullscreen }"
                        aria-label="Close"
                >
                    <?= $heroicons->xHtml(); ?>
                </button>
            </div>
            <div x-show="fullscreen"
                 x-transition
                 class="absolute left-2 flex flex-col gap-4 z-50 top-2">
                <button @click="zoomIn"
                        class="bg-gray-800 rounded-full w-10 h-10 flex items-center justify-center shadow-md hover:bg-gray-700 btn-image-zoom-fullscreen"
                        aria-label="Zoom In">
                    <?= $heroicons->zoomInHtml("md:h-6 md:w-6", 28, 28, ["aria-hidden" => "true"]) ?>
                </button>
                <button @click="zoomOut"
                        class="bg-gray-800 rounded-full w-10 h-10 flex items-center justify-center shadow-md hover:bg-gray-700 btn-image-zoom-fullscreen"
                        aria-label="Zoom Out">
                    <?= $heroicons->zoomOutHtml("md:h-6 md:w-6", 28, 28, ["aria-hidden" => "true"]) ?>
                </button>
            </div>

            <button
                    class="rounded p-1 outline-offset-2 absolute z-10 right-2 top-2 btn-image-zoom opacity-0"
                    aria-haspopup="true"
                    :class="{ '': !fullscreen, 'hidden': fullscreen }"
                    @click="fullscreen = true;"
            >
                <?= $heroicons->searchHtml("md:h-6 md:w-6", 28, 28, ["aria-hidden" => "true"]) ?>
            </button>
            <button
                    aria-label="<?= $escaper->escapeHtml(__('Previous')) ?>"
                    tabindex="-1"
                    class="mr-4 text-black rounded-full outline-none focus:outline-none flex-none absolute z-10 left-2 top-50 opacity-0 btn-image-prev"
                    :class="{ 'opacity-25 pointer-events-none' : activeSlide === 0}"
                    @click="scrollPreviousM"
            ><?= $heroicons->chevronLeftHtml('', 40, 40) ?></button>
            <div class="relative mb-2 product-main-image border rounded-lg">
                <div class="flex justify-center items-center gap-4 mt-2 md:hidden z-50 absolute bottom-2 w-full">
                    <template x-for="(image, index) in images" :key="index">
                        <a href="#" @click.prevent="setActive(index);" :class="{'thumb-image-active': active === index}">
                            <span
                                    class="dot-image block border border-container-darker rounded-full"
                                    :class="active === index ? 'dot-image-active' : ''"
                            ></span>
                        </a>
                    </template>
                </div>

                <?php
                /**
                 * The first image is a placeholder that determines the
                 * aspect ratio for the gallery. It will be hidden as
                 * soon as JS is loaded, but will keep reserving the
                 * necessary space in the layout for the other (absolute positioned)
                 * images. Hence, `opacity-0` instead of `x-show` or `hidden`
                 */
                ?>
                <img
                        alt="main product photo"
                        title="<?= $escaper->escapeHtmlAttr($productName) ?>"
                        class="object-contain object-center w-full h-auto max-h-screen-75  h-gallery"
                        :class="fullscreen ? 'invisible  d-h-gallery' : 'invisible'"
                        src="<?= /* @noEscape */ $urlWebpMedium ?>"
                        width="<?= /* @noEscape */ $mediumWidth ?>"
                        height="<?= /* @noEscape */ $mediumHeight ?>"
                        itemprop="image"
                />
                <template x-for="(image, index) in images" :key="index">
                    <img
                            :alt="image.caption || '<?= $escaper->escapeJs($productName) ?>'"
                            :title="image.caption || '<?= $escaper->escapeJs($productName) ?>'"
                            class="absolute inset-0 object-contain object-center w-full m-auto max-h-screen-75 h-gallery"
                            :class="{'cursor-pointer': !fullscreen, 'd-h-gallery' : fullscreen}"
                            width="<?= /* @noEscape */ $mediumWidth ?>"
                            height="<?= /* @noEscape */ $mediumHeight ?>"
                            :loading="active!==index ? 'lazy' : 'eager'"
                            :src=" fullscreen ? image.full : image.img"
                            x-transition.opacity.duration.500ms 
                            x-show="active===index"
                    />
                </template>
                <button
                    type="button"
                    class="absolute inset-0 w-full outline-offset-2"
                    aria-label="<?= $escaper->escapeHtmlAttr(__('Click to view image in fullscreen')) ?>"
                    x-ref="galleryFullscreenBtn"
                    x-show="!fullscreen && images[active].type !== 'video'"
                    x-cloak
                    @click="openFullscreen()"
                    @keydown.enter="openFullscreen()"
                ></button>
                <button
                    type="button"
                    class="group absolute inset-0 outline-offset-2 grid place-items-center"
                    aria-label="<?= $escaper->escapeHtmlAttr(__('Play video')) ?>"
                    x-show="images[active].type === 'video' && !activeVideoType"
                    x-cloak
                    @click="activateVideo()"
                    @keydown.enter="activateVideo()"
                >
                    <?= $heroiconsSolid->playHtml(
                        'stroke-white/75 fill-black/20 transition ease-in group-hover:scale-110 md:w-24 md:h-24',
                        44,
                        44,
                        ['aria-hidden' => 'true']
                    ); ?>
                </button>
                <div class="absolute inset-0 hidden w-full h-full bg-white nonmobile"
                     :class="{ 'hidden': activeVideoType !== 'youtube' }"
                     x-transition.opacity.duration.500ms x-show="
                         images[active].type === 'video' && activeVideoType === 'youtube'
                     "
                >
                    <div id="youtube-player" class="w-full h-full"></div>
                </div>
                <div class="absolute inset-0 hidden w-full h-full bg-white"
                     :class="{ 'hidden': activeVideoType !== 'vimeo' }"
                     x-transition.opacity.duration.500ms x-show="
                         images[active].type === 'video' && activeVideoType === 'vimeo'
                     "
                >
                    <div id="vimeo-player" class="w-full h-full"></div>
                </div>
            </div>
            <button
                    aria-label="<?= $escaper->escapeHtml(__('Next')) ?>"
                    tabindex="-1"
                    class="ml-4 text-black rounded-full outline-none focus:outline-none flex-none absolute z-10 right-2 top-50 opacity-0 btn-image-next"
                    :class="{ 'opacity-25 pointer-events-none' : isSliderEndD}"
                    @click="scrollNextM"
            ><?= $heroicons->chevronRightHtml('', 40, 40) ?></button>
        </div>
        <div @resize.window.debounce="calcPageSize(); $nextTick(() => calcActive())">
            <div
                    id="thumbs"
                    class="hidden md:flex items-center gap-4 relative"
                    :class="{ 'fixed justify-center left-0 right-0': fullscreen, 'mx-6' : fullscreen && !isSlider}"
                    style="min-height: 100px;"
            >
                <button
                        aria-label="<?= $escaper->escapeHtml(__('Previous')) ?>"
                        tabindex="-1"
                        class="mr-4 text-black rounded-full outline-none focus:outline-none flex-none absolute z-10 left-2"
                        :class="{ 'opacity-25 pointer-events-none' : isSliderStart, 'hidden' : !isSlider  }"
                        @click="scrollPrevious"
                ><?= $heroicons->chevronLeftHtml() ?></button>
                <div class="flex items-center js_thumbs_slides thumbs-wrapper relative flex-nowrap w-full overflow-auto js_slides snap md:px-1 xl:px-2"
                     x-ref="jsThumbSlides"
                     @scroll.debounce="calcPageSize(); calcActive()"
                >
                    <template x-for="(image, index) in images" :key="index">
                        <div class="js_thumbs_slide flex shrink-0 mb-2 mr-2 lg:mr-2 last:mr-0" :class="{ 'relative video' : image.type == 'video'}">
                            <a href="#" @click.prevent="setActive(index);"
                               class="block hover:border-primary focus:border-primary thumb-image"
                               :class="{'thumb-image-active': active === index}"
                            >
                                <img class="object-contain p-1" 
                                     :src="image.thumb"
                                     :alt="image.caption || '<?= $escaper->escapeJs($productName) ?>'"
                                     :title="image.caption || '<?= $escaper->escapeJs($productName) ?>'"
                                     width="<?= /* @noEscape */ $smallWidth ?>"
                                     height="<?= /* @noEscape */ $smallHeight ?>"
                                     style="height: <?= /* @noEscape */ $smallHeight ?>px;"
                                />
                            </a>
                        </div>
                    </template>
                </div>
                <button
                        aria-label="<?= $escaper->escapeHtml(__('Next')) ?>"
                        tabindex="-1"
                        class=" ml-4 text-black rounded-full outline-none focus:outline-none flex-none absolute z-10 right-2"
                        :class="{ 'opacity-25 pointer-events-none' : isSliderEnd, 'hidden' : !isSlider }"
                        @click="scrollNext"
                ><?= $heroicons->chevronRightHtml() ?></button>
            </div>
        </div>
    </div>
</div>
<script>
    function initGallery () {
        return {
            "isEnable": <?= /* @noEscape */ $viewModelWebp->getConfig()->isEnableModule() ?>,
            "active": 0,
            "videoData": {},
            "activeVideoType": false,
            "autoplayVideo": false,
            "loopVideo": true,
            "relatedVideos": false,
            "vimeoPlayer": null,
            "fullscreen": false,
            "isSlider": false,
            "initialImages": <?= /* @noEscape */ $block->getGalleryImagesJson() ?>,
            "images": <?= /* @noEscape */ $block->getGalleryImagesJson() ?>,
            "appendOnReceiveImages": <?=
                $block->getVar('gallery_switch_strategy', 'Magento_ConfigurableProduct') === 'append' ? 'true' : 'false'
                ?>,
            "activeSlide": 0,
            "isSliderStart": true,
            "isSliderEnd": false,
            "isSliderStartD": true,
            "isSliderEndD": false,
            "itemCount": 0,
            "pageSize": 4,
            "pageFillers": 0,
            zoomLevel: 1,
            zoomStep: 0.1,
            maxZoom: 2,
            minZoom: 1,
            init() {
                this.initActive();
                this.$nextTick(() => {
                    // this.calcPageSize();
                    this.calcScrollStartEnd();
                    this.calcScrollStartEndM();
                });

                this.$watch('fullscreen', open => {
                    this.$nextTick(() => {
                        this.scrollLock(open);

                        window.requestAnimationFrame(() => {
                            // this.calcPageSize()
                            this.calcScrollStartEnd();
                            this.calcScrollStartEndM();
                        });
                    });
                })
            },
            zoomIn() {
                if (this.zoomLevel < this.maxZoom) {
                    this.zoomLevel += this.zoomStep;
                    this.applyZoom();
                }
            },
            zoomOut() {
                if (this.zoomLevel > this.minZoom) {
                    this.zoomLevel -= this.zoomStep;
                    this.applyZoom();
                }
            },
            applyZoom() {
                const imgs = document.querySelectorAll('.product-main-image img');
                imgs.forEach((img, index) => {
                    if (index === this.active + 1) {
                        img.style.transform = `scale(${this.zoomLevel})`;
                        img.style.transition = 'transform 0.3s ease';
                    } else {
                        img.style.transform = 'scale(1)';
                    }
                });
            },
            replaceUrl(images) {
                if(this.isEnable) {
                    if(canDisplayWebp) {
                        images.forEach(image => {
                            image.full = image.full_webp;
                            image.img = image.img_webp;
                            image.thumb = image.thumb_webp;
                        })
                    }
                }
            },
            receiveImages(images) {
                if (this.appendOnReceiveImages) {
                    if(this.isEnable) {
                        if(canDisplayWebp) {
                            images.forEach(image => {
                                image.full = image.full_webp_child;
                                image.img = image.img_webp_child;
                                image.thumb = image.thumb_webp_child;
                            })
                            this.initialImages.forEach(image => {
                                image.full = image.full_webp;
                                image.img = image.img_webp;
                                image.thumb = image.thumb_webp;
                            })
                        }
                    }
                    const initialUrls = this.initialImages.map(image => image.full);
                    const newImages = images.filter(image => ! initialUrls.includes(image.full));
                    this.images = [].concat(this.initialImages, newImages);
                    this.setActive(newImages.length ? this.initialImages.length : 0);
                } else {
                    this.images = images;
                    this.setActive(0);
                }
            },
            resetGallery() {
                this.images = this.initialImages;
                this.setActive(0);
            },
            initActive() {
                let active = this.images.findIndex(function(image) {
                    return image.isMain === true
                });
                if (active === -1) {
                    active = 0;
                }
                this.setActive(active);
            },
            setActive(index) {
                this.active = index;
                if (window.youtubePlayer) {
                    window.youtubePlayer.stopVideo();
                }
                if (this.vimeoPlayer) {
                    this.vimeoPlayer.contentWindow.postMessage(JSON.stringify({"method": "pause"}), "*");
                }
                if (this.images[index].type === 'video') {
                    this.activateVideo();
                }
                this.activeSlide = this.active;
                this.calcScrollStartEndM();
            },
            activateVideo() {
                const videoData = this.getVideoData();

                if (!videoData) { return }

                this.activeVideoType = videoData.type;

                if (videoData.type === "youtube") {
                    if (!window.youtubePlayer) {
                        this.initYoutubeAPI(videoData);
                    } else {
                        window.youtubePlayer.loadVideoById(videoData.id);
                    }

                } else if (videoData.type === "vimeo") {
                    this.initVimeoVideo(videoData);
                }
            },
            getVideoData() {
                const videoUrl = this.images[this.active] && this.images[this.active].videoUrl;

                if (!videoUrl) { return }

                let id,
                    type,
                    youtubeRegex,
                    vimeoRegex,
                    useYoutubeNoCookie = false;

                if (videoUrl.match(/youtube\.com|youtu\.be|youtube-nocookie.com/)) {
                    id = videoUrl.replace(/^\/(embed\/|v\/)?/, '').replace(/\/.*/, '');
                    type = 'youtube';

                    youtubeRegex = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/;
                    id = videoUrl.match(youtubeRegex)[1];

                    if (videoUrl.match(/youtube-nocookie.com/)) {
                        useYoutubeNoCookie = true;
                    }
                } else if (videoUrl.match(/vimeo\.com/)) {
                    type = 'vimeo';
                    vimeoRegex = new RegExp(['https?:\\/\\/(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)',
                        '?|groups\\/([^\\/]*)\\/videos\\/|album\\/(\\d+)\\/video\\/|video\\/|)(\\d+)(?:$|\\/|\\?)'
                    ].join(''));
                    id = videoUrl.match(vimeoRegex)[3];
                }

                return id ? {
                    id: id, type: type, useYoutubeNoCookie: useYoutubeNoCookie
                } : false;
            },
            initYoutubeAPI(videoData) {
                if (document.getElementById('loadYoutubeAPI')) {
                    return;
                }
                const params = {
                    "autoplay": true
                };
                const loadYoutubeAPI = document.createElement('script');
                loadYoutubeAPI.src = 'https://www.youtube.com/iframe_api';
                loadYoutubeAPI.id = 'loadYoutubeAPI';
                const firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(loadYoutubeAPI, firstScriptTag);

                const host = (videoData.useYoutubeNoCookie) ?
                    'https://www.youtube-nocookie.com' :
                    'https://www.youtube.com';

                if (this.autoplayVideo) {
                    params.autoplay = this.autoplayVideo;
                }
                if (!this.relatedVideos) {
                    params.rel = 0;
                }
                const fireYoutubeAPI = document.createElement('script');
                fireYoutubeAPI.innerHTML = `function onYouTubeIframeAPIReady() {
                    window.youtubePlayer = new YT.Player('youtube-player', {
                        host: '${host}',
                        videoId: '${videoData.id}',
                        playerVars: ${JSON.stringify(params)},
                    });
                }`;
                firstScriptTag.parentNode.insertBefore(fireYoutubeAPI, firstScriptTag);
            },
            initVimeoVideo(videoData) {
                let
                    additionalParams = '',
                    src;

                const timestamp = new Date().getTime();
                const vimeoContainer = document.getElementById("vimeo-player");
                const videoId = videoData.id;

                if (!vimeoContainer || !videoId) return;

                if (this.autoplayVideo) {
                    additionalParams += '&autoplay=1';
                }

                if (this.loopVideo) {
                    additionalParams += '&loop=1';
                }
                src = 'https://player.vimeo.com/video/' +
                    videoId + '?api=1&player_id=vimeo' +
                    videoId +
                    timestamp +
                    additionalParams;
                vimeoContainer.innerHTML =
                    `<iframe id="${'vimeo' + videoId + timestamp}"
                        src="${src}"
                        width="640" height="360"
                        webkitallowfullscreen
                        mozallowfullscreen
                        allowfullscreen
                        referrerPolicy="origin"
                        allow="autoplay"
                        class="object-center w-full h-full object-fit"
                     />`;

                this.vimeoPlayer = vimeoContainer.childNodes[0];
            },
            getSlider() {
                return this.$refs.jsThumbSlides;
            },
            calcPageSize() {
                const slider = this.getSlider();
                if (slider) {
                    const slideEl = slider.querySelector('.js_thumbs_slide'),
                        marginRight = parseInt(window.getComputedStyle(slideEl).marginRight);

                    this.itemCount = slider.querySelectorAll('.js_thumbs_slide').length;
                    this.pageSize = Math.round(slider.clientWidth / (slideEl.clientWidth + marginRight));
                    this.pageFillers = (
                        this.pageSize * Math.ceil(this.itemCount / this.pageSize)
                    ) - this.itemCount;

                    this.isSlider = ((slider.clientWidth - (this.itemCount * (slideEl.clientWidth + marginRight))) < 0);
                }
            },
            calcScrollStartEnd() {
                const slider = this.getSlider();
                if (slider) {
                    this.isSliderStart = slider.scrollLeft === 0;
                    this.isSliderEnd = Math.ceil(slider.scrollLeft + slider.offsetWidth) >= slider.scrollWidth;
                }
            },
            calcScrollStartEndM() {
                const slider = this.getSlider();
                if (slider) {
                    this.isSliderStartD = (this.activeSlide === 0);
                    this.isSliderEndD   = (this.activeSlide + 1 >= this.images.length);
                }
            },
            calcActive() {
                const slider = this.getSlider();
                if (slider) {
                    const sliderItems = this.itemCount + this.pageFillers;
                    const calculatedActiveSlide = slider.scrollLeft / (slider.scrollWidth / sliderItems);
                    this.activeSlide = Math.round(calculatedActiveSlide / this.pageSize) * this.pageSize;
                    this.calcScrollStartEnd();
                }
            },
            scrollPrevious() {
                this.scrollTo(this.activeSlide - this.pageSize);
            },
            scrollNext() {
                this.scrollTo(this.activeSlide + this.pageSize);
            },
            scrollPreviousM() {
                this.activeSlide = Math.max(this.active - 1, 0);
                this.active = this.activeSlide;
                this.scrollTo(this.activeSlide);
                this.calcScrollStartEndM();
            },
            scrollNextM() {
                if (this.activeSlide + 1 < this.images.length) {
                    this.activeSlide = Math.min(this.active + 1);
                    this.active = this.activeSlide;
                    this.scrollTo(this.activeSlide);
                    this.calcScrollStartEndM();
                }
            },
            scrollTo(idx) {
                const slider = this.getSlider();
                if (slider) {
                    const slideWidth = slider.scrollWidth / (this.itemCount + this.pageFillers);
                    slider.scrollLeft = Math.floor(slideWidth) * idx;
                    this.activeSlide = idx;
                }
            },
            setActiveAndScrollTo(index) {
                this.setActive(index)
                if (this.isSlider) {
                    this.scrollTo(index);
                }
            },
           eventListeners: {
                ['@keydown.window.escape']() {
                    if (!this.fullscreen) return;
                    this.closeFullScreen()
                },
                ['@update-gallery.window'](event) {
                    this.receiveImages(event.detail);
                },
                ['@reset-gallery.window'](event) {
                    this.resetGallery();
                },
                ['@keyup.arrow-right.window']() {
                    if (!this.fullscreen) return;
                    this.nextItem();
                },
                ['@keyup.arrow-left.window']() {
                    if (!this.fullscreen) return;
                    this.previousItem();
                },
            },
            scrollLock(use = true) {
                document.body.style.overflow = use ? "hidden" : "";
            },
            openFullscreen() {
                this.fullscreen = true;

                hyva.trapFocus(this.$root);
            },
            closeFullScreen(setFocusTo = this.$refs.galleryFullscreenBtn) {
                this.fullscreen = false;
                hyva.releaseFocus(this.$root);
                this.$nextTick(() => {
                    this.calcPageSize();
                    setFocusTo && setFocusTo.focus()
                });
            },
            handleTouchStart(event) {
                if (
                    this.images.length <= 1 ||
                    event.touches.length > 1 ||
                    (window.visualViewport && window.visualViewport.scale > 1.01)
                ) return;
                const firstTouch = event.touches[0];

                touchXDown = firstTouch.clientX;
                touchYDown = firstTouch.clientY;
            },
            handleTouchMove(event) {
                if (
                    this.images.length <= 1 ||
                    event.touches.length > 1 ||
                    (window.visualViewport && window.visualViewport.scale > 1.01) ||
                    !touchXDown ||
                    !touchYDown
                ) return;

                const xDiff = touchXDown - event.touches[0].clientX;
                const yDiff = touchYDown - event.touches[0].clientY;

                if (Math.abs(xDiff) > Math.abs(yDiff)) {
                    const newIndex = xDiff > 0 ?  this.getNextIndex() : this.getPreviousIndex();
                    this.setActiveAndScrollTo(newIndex)
                }
                touchXDown = touchYDown = null;
            },
            getPreviousIndex() {
                return this.active > 0 ? this.active - 1 : this.itemCount - 1;
            },
            getNextIndex() {
                return this.active + 1 === this.itemCount ? 0 : this.active + 1;
            },
            previousItem() {
                if (this.active === 0) return;
                this.setActiveAndScrollTo(this.active - 1);
            },
            nextItem() {
                if ((this.active + 1) === this.itemCount) return;
                this.setActiveAndScrollTo(this.active + 1);
            },
        }
    }
</script>
