<?php
/**
 * Mageplaza
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Mageplaza.com license that is
 * available through the world-wide-web at this URL:
 * https://www.mageplaza.com/LICENSE.txt
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * version in the future.
 *
 * @category    Mageplaza
 * @package     Mageplaza_AjaxLayer
 * @copyright   Copyright (c) Mageplaza (http://www.mageplaza.com/)
 * @license     https://www.mageplaza.com/LICENSE.txt
 */

declare(strict_types=1);

/** @var \Magento\Framework\Escaper $escaper */
/** @var \Magento\Catalog\Block\Product\ProductList\Toolbar $block */

$uniqueId          = '_' . uniqid();
$additionalOptions = ['page' => 'p'];
?>
<script>
    function initToolbar<?= /** @noEscape */  $uniqueId ?>() {
        return {
            options: <?= /* @noEscape */ $block->getWidgetOptionsJson($additionalOptions) ?>.productListToolbarForm || {},
            isLoading: false,
            getUrlParams: function () {
                const decode = window.decodeURIComponent;
                const [baseUrl, queryString] = this.options.url.split('?');
                const urlParams = queryString ? queryString.split('&') : [];
                return urlParams.reduce((params, param) => {
                    const [key, value] = param.split('=');
                    params[decode(key)] = value !== undefined ? decode(value.replace(/\+/g, '%20')) : '';
                    return params;
                }, {});
            },
            changeViewMode(e, link) {
                e.preventDefault();
                if (link) {
                    this.ajaxSubmit(link);
                }
            },
            getCurrentLimit: function () {
                return this.getUrlParams()[this.options.limit] || this.options.limitDefault;
            },
            getCurrentPage: function () {
                return this.getUrlParams()[this.options.page] || 1;
            },
            addTimestampToURL: function (originalURL) {
                const timestamp = Date.now();
                const separator = originalURL.includes('?') ? '&' : '?';
                return `${originalURL}${separator}_=${timestamp}`;
            },
            changeUrl (paramName, paramValue, defaultValue) {
                const [baseUrl, queryString] = this.options.url.split('?');
                const paramData = this.getUrlParams();
                const currentPage = this.getCurrentPage();

                /**
                 * calculates the page on which the first item of the current page will
                 * be with the new limit and sets that number as the new page
                 */
                if (currentPage > 1 && paramName === this.options.limit) {
                    const newPage = Math.floor(this.getCurrentLimit() * (currentPage - 1) / paramValue) + 1;

                    if (newPage > 1) {
                        paramData[this.options.page] = newPage;
                    } else {
                        delete paramData[this.options.page];
                    }
                }

                paramData[paramName] = paramValue;

                if (this.options.post) {
                    hyva.postForm({action: baseUrl, data: paramData, skipUenc: false});
                } else {
                    if (paramValue === defaultValue.toString()) {
                        delete paramData[paramName];
                    }
                    const queryString = Object.keys(paramData).length === 0 ? '' : `?${new URLSearchParams(paramData)}`;
                    this.showLoader();
                    let link = baseUrl + queryString;
                    let newLink= this.addTimestampToURL(link);
                    window.history.pushState({url: link}, '', link);
                    fetch(newLink, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        }
                    ).then(response => response.json())
                    .then(data => {
                        let productContainer = document.querySelector('#layer-product-list');
                        let layerContainer   = document.querySelector('#layered-filter-block-container');
                        if (productContainer) {
                            productContainer.innerHTML = data.products;
                            hyva.activateScripts(productContainer);
                        }

                        if (layerContainer) {
                            layerContainer.innerHTML = data.navigation;
                            hyva.activateScripts(layerContainer);
                        }

                        window.history.pushState({url: link}, '', link);
                        this.hideLoader();
                    }).catch(error => {
                        location.href = baseUrl + queryString;
                        this.hideLoader();
                    });
                }
            },
            showLoader() {
                const loader = document.querySelector('.mplayer-loader');
                if (loader) {
                    loader.style.display='';
                }
            },
            hideLoader() {
                const loader = document.querySelector('.mplayer-loader');
                if (loader) {
                    loader.style.display = 'none';
                }
            },
        }
    }
</script>
<?php if ($block->getCollection()->getSize()): ?>
    <div x-data="initToolbar<?= /** @noEscape */
    $uniqueId ?>()"
         class="toolbar toolbar-products flex flex-wrap items-center gap-2 items-center justify-between">
        <?= $block->getBlockHtml('mplayer_loader') ?>
        <?php if ($block->getIsBottom()): ?>
            <?= $block->getPagerHtml() ?>
            <?= /** @noEscape */
            $block->fetchView($block->getTemplateFile('Magento_Catalog::product/list/toolbar/limiter.phtml')) ?>
        <?php else: ?>
            <?php if ($block->isExpanded()): ?>
                <div class="flex-shrink-0">
                    <?= /** @noEscape */
                    $block->fetchView($block->getTemplateFile('Magento_Catalog::product/list/toolbar/sorter.phtml')) ?>
                </div>
                <div class="flex items-center gap-4">
                <?= /** @noEscape */
                $block->fetchView($block->getTemplateFile('Magento_Catalog::product/list/toolbar/limiter-top.phtml')) ?>

                <?= /** @noEscape */
                $block->fetchView($block->getTemplateFile('Magento_Catalog::product/list/toolbar/viewmode.phtml')) ?>
                </div>
            <?php endif ?>
        <?php endif ?>
    </div>
<?php endif ?>
