<?php

namespace Biztech\Deliverydatepro\Helper;

use Magento\Framework\App\Helper\Context;
use Magento\Framework\App\Helper\AbstractHelper;
use Magento\Framework\View\Asset\Repository;

class Data extends AbstractHelper {

    protected $_assetRepo;

    /**
     *
     * @param Context $context
     * @param EncryptorInterface $encryptor
     * @param ModuleListInterface $moduleList
     * @param Json $zend
     * @param StoreManagerInterface $storeManager
     * @param Config $resourceConfig
     * @param ObjectManagerInterface $objectmanager
     * @param ReinitableConfigInterface $coreConfig
     * @param Website $web
     * @param CollectionFactory $collectionFactory
     * @param TimezoneInterface $timezone
     * @param PricingHelper $priceHelper
     * @param TransportBuilder $transportBuilder
     * @param DateTime $date
     * @param Repository $assetRepo
     * @param SerializerInterface $serializer
     * @param StateInterface $inlineTranslation
     */
    public function __construct(
            Context $context, Repository $assetRepo, \Biztech\Deliverydate\Helper\Data $basicHelper, \Biztech\Deliverydatepro\Model\HolidayFactory $holidayCollection, \Magento\Framework\Registry $registry, \Magento\Quote\Model\Quote\AddressFactory $quoteAddressFactory, \Magento\Checkout\Model\Session $checkoutSession, \Magento\Catalog\Model\ProductFactory $productFactory, \Magento\Quote\Model\ResourceModel\Quote\Address\Item\CollectionFactory $addressItemCollectionFactory
    ) {
        $this->_assetRepo = $assetRepo;
        $this->_basicHelper = $basicHelper;
        $this->holidayCollection = $holidayCollection;
        $this->_registry = $registry;
        $this->_quoteAddressFactory = $quoteAddressFactory;
        $this->checkoutSession = $checkoutSession;
        $this->_productFactory = $productFactory;
        $this->addressItemCollectionFactory = $addressItemCollectionFactory;
        parent::__construct($context);
    }

    public function getProductLevelConfig() {
        $enabledMethod = $this->_basicHelper->getDeliveryDateView();
        switch ($enabledMethod) {
            case 1:
                $template = 'Biztech_Deliverydatepro/product/view/product-calender';
                break;

            case 2:
                $template = 'Biztech_Deliverydatepro/product/view/product-timeslot';
                break;
            default:
                $template = 'Biztech_Deliverydatepro/product/view/product-calender';
                break;
        }

        $dateDisplayMode = $this->_basicHelper->getDateDisplayMode();
        $timeDisplayMode = $this->_basicHelper->getTimeDisplayMode();
        $enableTimeslotMode = $this->_basicHelper->getEnableTimeslotMode();

        $nonworking_days = $this->_basicHelper->getFormattedNonWorkingDays();
        $nonworking_period = $this->_basicHelper->getFormattedNonWorkingPeriod();
        if ($this->excludeHolidays() == 1) {
            $holiday = $this->getEnableHolidays();
            $annualNotRepeatHoliday = [];
            $annualRepeatHoliday = [];
            if (isset($holiday['annualNotRepeatHoliday'])) {
                $annualNotRepeatHoliday = (array) $holiday['annualNotRepeatHoliday'];
            }
            if (isset($holiday['annualRepeatHoliday'])) {
                $annualRepeatHoliday = (array) $holiday['annualRepeatHoliday'];
            }
            $off_days = array_merge((array) $nonworking_days, (array) $nonworking_period, $annualNotRepeatHoliday, $annualRepeatHoliday);
        } else {
            $off_days = array_merge((array) $nonworking_days, (array) $nonworking_period);
        }

        $cutoff = $this->_basicHelper->disableDayBasedOnCutoff();
        if ($cutoff['status'] === true) {
            $off_days = array_values(array_unique(array_merge($off_days, $cutoff['day_to_disable']), SORT_REGULAR));
        }
        $deliverydateLabel = $this->_basicHelper->getDeliverydatelabel() ? $this->_basicHelper->getDeliverydatelabel() : 'Deliverydate Date';
        $deliverydateCommentsLabel = $this->_basicHelper->getDeliveryDateCommentsLabel() ? $this->_basicHelper->getDeliveryDateCommentsLabel() : 'Deliverydate Comments';
        $timeslotTableLabel = $this->_basicHelper->getTableLabel();
        $timeslotTableLabel = $timeslotTableLabel ? $timeslotTableLabel : 'Timeslot\'s';
        $dayOffs = $this->_basicHelper->getDayOffs();

        $isOrderProcessingTime = false;
        $deliveryOption = $this->deliveryOption();
        if ($deliveryOption == 2) {
            $isOrderProcessingTime = true;
            $orderProcessingTime = $this->getProductWiseOrderProTime();
        }
        if ($isOrderProcessingTime) {
            if ($orderProcessingTime > 0) {
                $dayDiff = $orderProcessingTime;
            } else {
                $dayDiff = 0;
            }
        } else {
            $dayDiff = $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/deliverytime_day_diff', \Magento\Store\Model\ScopeInterface::SCOPE_STORE) ? $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/deliverytime_day_diff', \Magento\Store\Model\ScopeInterface::SCOPE_STORE) : 0;
        }

        $excludeHolidayFromProcessingDay = $this->excludeHolidayFromProcessingDay();
        if ($excludeHolidayFromProcessingDay) {
            $processingDateArray = [];
            $processingDayArray = [];
            for ($i = 0; $i < $dayDiff; $i++) {
                $modifiedDate = date('d-m-Y', strtotime('+' . $i . ' days'));
                $processingDateArray[] = $modifiedDate;
                $processingDayArray[] = date('w', strtotime($modifiedDate));
            }

            foreach ($processingDateArray as $processingDate) {
                if (in_array($processingDate, $off_days)) {
                    $dayDiff++;
                }
            }
            if ($dayOffs != "" || $dayOffs != NULL) {
                $dayOffsArray = explode(',', $dayOffs);
                $processingDayArray = array_count_values($processingDayArray);

                foreach ($processingDayArray as $key => $processingDay) {
                    if (in_array($key, $dayOffsArray)) {
                        $dayDiff = $dayDiff + $processingDay;
                    }
                }
            }
        }

        $timeDiff = $this->_basicHelper->getConfigValue('deliverydate/deliverydate_timeslots/deliverytime_diff', \Magento\Store\Model\ScopeInterface::SCOPE_STORE) ? $this->_basicHelper->getConfigValue('deliverydate/deliverydate_timeslots/deliverytime_diff', \Magento\Store\Model\ScopeInterface::SCOPE_STORE) : 0;
        $timeslot = $this->_basicHelper->getavailableTimeslot();

        $display = false;
        if ($this->_basicHelper->isEnable() && $this->_basicHelper->getOnWhichPage() == 2) {
            $display = true;
        }

        $config = [
            'templateConfig' => [
                'template' => $template,
                'enabledMethod' => $enabledMethod,
                'deliverydateLabel' => __($deliverydateLabel),
                'deliverydateComments' => __($deliverydateCommentsLabel),
                'showHtml' => (int) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/show_html', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                'displayHtml' => nl2br($this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/deliverydate_html', \Magento\Store\Model\ScopeInterface::SCOPE_STORE)),
            ],
            'general' => [
                'enabled' => (int) $display,
                'disabledDates' => $off_days,
                'dayOffs' => $dayOffs,
                'dateFormat' => $this->_basicHelper->convertDateFormatToJQueryUi($this->_basicHelper->getDeliveryDateFormat()),
                'timeFormat' => $this->_basicHelper->convertDateFormatToJQueryUi($this->_basicHelper->getDeliveryTimeFormat()),
                'dayDiff' => (int) $dayDiff,
                'timeDiff' => $timeDiff,
                'isMandatory' => (int) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/is_mandatory', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                'useCallFeature' => (int) $this->_basicHelper->useCallFeature(),
                'callMeLabel' => $this->_basicHelper->getDeliveryDateCallMeLabel(),
                'ProductWiseCharges' => $this->getProductWiseCharges(),
                'deliveryOption' => $this->deliveryOption(),
                //'estimatedMessage' => $this->estimationMsgOnProduct(),
                'add_comment' => $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/add_comment'),
                'comment_required' => $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/comment_required'),
                'applyAdditionalCharge' => $this->_basicHelper->applyAdditionalCharge(),
                'sameDayCharges' => $this->_basicHelper->getSameDayCharges(),
                'per_week_day_charge' => $this->getDayCharges(),
                'enable_same_day_charge' => $this->dayWiseCharge(),
                'allowProductWiseCharge' => $this->allowProductWiseCharge(),
                'currencySymbol' => $this->_basicHelper->getStoreCurrencySymbol(),
                'enablwOnWhichPage' => $this->_basicHelper->getOnWhichPage(),
            ],
            'calendar' => [
                'options' => [
                    'showsTime' => (int) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_general/deliverytime_enable_time', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                    'buttonImage' => $this->_assetRepo->getUrl("Biztech_Deliverydate::images/datepicker.png"),
                    'interval' => (int) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_general/datepicker_time_mininterval', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                    'buttonText' => __('Select Date'),
                    'showAnim' => $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/datepicker_enable_animation', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                    'showButtonPanel' => (bool) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/datepicker_buttom_bar', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                    'isRTL' => (bool) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/datepicker_rtl', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                    'maxDate' => (int) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/datepicker_delivery_intervals', \Magento\Store\Model\ScopeInterface::SCOPE_STORE),
                    'dateDisplayMode' => $dateDisplayMode,
                    'getavailableDays' => $this->_basicHelper->getavailableDays(),
                    'enableTimeSlotForCalendar' => $enableTimeslotMode,
                    'timeDisplayMode' => $timeDisplayMode,
                    'deliverydateSlotLabel' => $this->_basicHelper->getDeliverydatetimeslotLabel(),
                    'imageUrl' => $this->_assetRepo->getUrl("Biztech_Deliverydate::images"),
                ]
            ],
            'timeslot' => [
                'enabled_timeslots' => $timeslot,
                'timeslotTableLabel' => __($timeslotTableLabel),
            ]
        ];

        if ($this->excludeHolidays() == 1) {
            $holiday = $this->getEnableHolidays();
            if (isset($holiday['annualRepeatHoliday'])) {
                $holidayArray = [];
                foreach ($holiday['annualRepeatHoliday'] as $holiday) {
                    $date = strtotime($holiday);
                    //n means month without leading zero in two digits, j means date without leading zero (did as in js we get value without leading zero)
                    $holidayArray[] = date("j", $date) . '-' . date("n", $date);
                }
                $config['calendar']['options']['annualRepeatHoliday'] = $holidayArray;
            }
        }
        return $config;
    }

    public function isAppliableWithCategory($product) {
        if ($this->useCategoryForProduct()) {
            $allowedCategory = $this->getSelectApplicableCategoryForProduct();
            $categoryIds = $product->getCategoryIds();
            $result = array_intersect($allowedCategory, $categoryIds);
            return (empty($result) === false);
        } else {
            return true;
        }
    }

    public function useCategoryForProduct() {
        return (bool) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/allow_for_category', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function getSelectApplicableCategoryForProduct() {
        $selectedCategories = $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/use_category', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        if (strlen($selectedCategories) > 0) {
            return explode(',', $selectedCategories);
        } else {
            return [];
        }
    }

    public function checkCurrentUserAllowed($userGroupId) {
        if ($this->useCustomerGroup()) {
            return in_array($userGroupId, $this->useAllowedCustomerGroup());
        } else {
            return true;
        }
    }

    public function useCustomerGroup() {
        return (bool) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/use_customer_group', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function useAllowedCustomerGroup() {
        $selectedGroups = $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/selected_group', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        if (strlen($selectedGroups) > 0) {
            return explode(',', $selectedGroups);
        } else {
            return [];
        }
    }

    public function excludeHolidays() {
        return (bool) $this->_basicHelper->getConfigValue('deliverydate/deliverydate_dayoff/exclude_holiday', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function getEnableHolidays() {
        $annualRepeatHoliday = $this->holidayCollection->create()->getCollection()->addFieldToFilter('status', 1)->addFieldToFilter('is_annual', 1);
        $annualNotRepeatHoliday = $this->holidayCollection->create()->getCollection()->addFieldToFilter('status', 1)->addFieldToFilter('is_annual', 0);

        $result = [];
        if (count($annualNotRepeatHoliday) > 0) {
            foreach ($annualNotRepeatHoliday->getData() as $key => $value) {
                $result['annualNotRepeatHoliday'][] = date('d-m-Y', strtotime(date($value['day'] . '-' . $value['month'] . '-' . $value['year'])));
            }
        }
        if (count($annualRepeatHoliday) > 0) {
            foreach ($annualRepeatHoliday->getData() as $key => $value) {
                $result['annualRepeatHoliday'][] = date('d-m-Y', strtotime(date($value['day'] . '-' . $value['month'] . '-' . date('Y'))));
            }
        }
        return $result;
    }

    public function dayWiseCharge() {
        return $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/day_wise_charge', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function getDayCharges() {
        $dayCharge = $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/per_day_of_week', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $this->dayCharge = [];
        if ($dayCharge) {
            $this->dayCharge = $this->_basicHelper->getConfigData($dayCharge);
        }
        return $this->dayCharge;
    }

    public function addWeekDayCharges($selectedDate) {
        $weekDayCharages['addCharge'] = false;
        $weekDayEnable = $this->getDayCharges();
        if (!empty($weekDayEnable)) {
            $selectedDate = date('Y-m-d', strtotime($selectedDate));
            $dayOfWeek = date("N", strtotime($selectedDate));
            foreach ($weekDayEnable as $weekDetails) {
                if ($weekDetails['day'] == $dayOfWeek) {
                    $weekDayCharages['addCharge'] = true;
                    $weekDayCharages['charges'] = $weekDetails['price'];
                }
            }
        }
        return $weekDayCharages;
    }

    public function deliveryOption() {
        return $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/delivery_option', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function getProductWiseCharges() {
        $productDetails = $this->_registry->registry('current_product');
        $additionalCharge = '';
        if (isset($productDetails))
            $additionalCharge = $productDetails->getAdditionalDeliveryCharge();
        return $additionalCharge;
    }

    public function getProductWiseOrderProTime() {
        $productDetails = $this->_registry->registry('current_product');
        $orderProcessingTime = 0;
        if (isset($productDetails)) {
            if ($productDetails->getId())
                $orderProcessingTime = $productDetails->getOrderProcessingTime();
        }
        return $orderProcessingTime;
    }

    public function estimationMsgOnProduct() {
        $isMessage = $this->_basicHelper->getConfigValue('deliverydate/date_display/estimation_message_on_product', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $result = ['display' => false];
        if ($isMessage == 1 && $this->_basicHelper->getOnWhichPage() == 2 && $this->deliveryOption() == 2) {
            $productDetails = $this->_registry->registry('current_product');
            if ($productDetails->getId())
                $orderProcessingTime = $productDetails->getOrderProcessingTime();
            $message = __('Estimated Delivery: ' . $orderProcessingTime . ' days');
            $result = ['display' => true,
                'message' => $message];
        }
        return $result;
    }

    /* save date selection data in address table for multishipping checkout */

    public function saveMultiShippingData($dateSelection) {
        $quoteAddress = $this->_quoteAddressFactory->create();
        $isPreSelectDate = $this->_basicHelper->isPreSelectDate();
        $is_mandatory = $this->_basicHelper->getConfigValue('deliverydate/deliverydate_front_config/is_mandatory', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        foreach ($dateSelection['shipping_method'] as $addressId => $address) {
            $loadAddress = $quoteAddress->load($addressId);
            $enabledMethod = $this->_basicHelper->getDeliveryDateView();
            //save date
            if ((isset($dateSelection['shipping_arrival_date_hidden'][$addressId]) && $enabledMethod == '1') || (isset($dateSelection['shipping_arrival_date'][$addressId]) && $enabledMethod == '2')) {

                //check if calendar mode or timeslot mode
                if ($enabledMethod == '1')
                    $deliveryDate = $dateSelection['shipping_arrival_date_hidden'][$addressId]; // calendar mode
                else
                    $deliveryDate = $dateSelection['shipping_arrival_date'][$addressId]; // timeslot mode

                if ($deliveryDate == '' || $deliveryDate == NULL) {
                    if (!$is_mandatory && $isPreSelectDate) {
                        $selectedDate = $this->getPreSelectDate($addressId);
                        $loadAddress->setData('shipping_arrival_date', $selectedDate);
                        $loadAddress->setSameDayCharges(0);
                    } else {
                        $loadAddress->setData('shipping_arrival_date', NULL);
                    }
                } else {
                    $loadAddress->setData('shipping_arrival_date', $deliveryDate);
                }

                if ($this->_basicHelper->applyAdditionalCharge() && !($deliveryDate == '' || $deliveryDate == NULL)) {
                    $finalAdditionalCharge = 0;
                    $loadAddress->setSameDayCharges(0);

                    $dayWiseChargeType = $this->dayWiseCharge();
                    if ($dayWiseChargeType == 1) {
                        $addressItem = $this->addressItemCollectionFactory->create()->addFieldToFilter('quote_address_id', $addressId);
                        if ($addressItem->getSize() > 0) {
                            foreach ($addressItem->getData() as $item) {
                                if ($this->allowProductWiseCharge()) {
                                    $product = $this->getProduct($item['product_id']);
                                    $additionalCharge = $product->getAdditionalDeliveryCharge();
                                    $finalAdditionalCharge += $additionalCharge;
                                }
                            }
                        }
                        $sameDayCharges = $this->_basicHelper->addSameDayCharges($deliveryDate);
                        if ($sameDayCharges['addCharge'] === true) {
                            $finalAdditionalCharge += $sameDayCharges['charges'];
                        }
                        $loadAddress->setSameDayCharges($finalAdditionalCharge);
                    } else if ($dayWiseChargeType == 2) {
                        $addressItem = $this->addressItemCollectionFactory->create()->addFieldToFilter('quote_address_id', $addressId);
                        if ($addressItem->getSize() > 0) {
                            foreach ($addressItem->getData() as $item) {
                                if ($this->allowProductWiseCharge()) {
                                    $product = $this->getProduct($item['product_id']);
                                    $additionalCharge = $product->getAdditionalDeliveryCharge();
                                    $finalAdditionalCharge += $additionalCharge;
                                }
                            }
                        }
                        $weekDayCharges = $this->addWeekDayCharges($deliveryDate);
                        if ($weekDayCharges['addCharge'] === true) {
                            $finalAdditionalCharge += $weekDayCharges['charges'];
                        }
                        $loadAddress->setSameDayCharges($finalAdditionalCharge);
                    }
                } else {
                    $loadAddress->setSameDayCharges(0);
                }
            } else {
                if (!$is_mandatory && $isPreSelectDate) {
                    $selectedDate = $this->getPreSelectDate($addressId);
                    $loadAddress->setData('shipping_arrival_date', $selectedDate);
                    $loadAddress->setSameDayCharges(0);
                } else {
                    $loadAddress->setData('shipping_arrival_date', NULL);
                    $loadAddress->setSameDayCharges(0);
                }
            }
            //save time slot
            if (isset($dateSelection['shipping_arrival_slot'][$addressId])) {
                $loadAddress->setData('shipping_arrival_slot', $dateSelection['shipping_arrival_slot'][$addressId]);
            } else {
                $loadAddress->setData('shipping_arrival_slot', NULL);
            }

            //save charges
            if (isset($dateSelection['delivery_charges'][$addressId])) {
                $loadAddress->setData('delivery_charges', $dateSelection['delivery_charges'][$addressId]);
            } else {
                $loadAddress->setData('delivery_charges', NULL);
            }

            //save comment
            if (isset($dateSelection['shipping_arrival_comments'][$addressId])) {
                $loadAddress->setData('shipping_arrival_comments', $dateSelection['shipping_arrival_comments'][$addressId]);
            } else {
                $loadAddress->setData('shipping_arrival_comments', NULL);
            }
            //save call me before details
            if (isset($dateSelection['call_before_delivery'][$addressId])) {
                $loadAddress->setData('call_before_delivery', $dateSelection['call_before_delivery'][$addressId]);
            } else {
                $loadAddress->setData('call_before_delivery', 0);
            }
            $loadAddress->save();
        }
        return $this;
    }

    public function getPreSelectDate($addressId) {
        $off_days = [];
        $nonworking_days = $this->_basicHelper->getFormattedNonWorkingDays();
        $nonworking_period = $this->_basicHelper->getFormattedNonWorkingPeriod();

        $isOrderProcessingTime = false;
        $deliveryOption = $this->deliveryOption();
        if ($deliveryOption == 2) {
            $isOrderProcessingTime = true;
            $orderProcessingTime = $this->getQuoteAddressData($addressId);
        }

        if ($this->excludeHolidays() == 1) {
            $holiday = $this->getEnableHolidays();
            $annualNotRepeatHoliday = [];
            $annualRepeatHoliday = [];
            if (isset($holiday['annualNotRepeatHoliday'])) {
                $annualNotRepeatHoliday = (array) $holiday['annualNotRepeatHoliday'];
            }
            if (isset($holiday['annualRepeatHoliday'])) {
                $annualRepeatHoliday = (array) $holiday['annualRepeatHoliday'];
            }
            $off_days = array_merge((array) $nonworking_days, (array) $nonworking_period, $annualNotRepeatHoliday, $annualRepeatHoliday);
        } else {
            $off_days = array_merge((array) $nonworking_days, (array) $nonworking_period);
        }

        $dayOffs = $this->_basicHelper->getDayOffs();
        if ($dayOffs) {
            $dayOffsArray = explode(',', $dayOffs);
            $dayArray = [];
            foreach ($dayOffsArray as $k => $v) {
                $dayName = $this->_basicHelper->dayName($v);
                $dayArray[] = date('d-m-Y', strtotime($dayName));
                $dayArray[] = date('d-m-Y', strtotime('next ' . $dayName));
                $dayArray[] = date('d-m-Y', strtotime('second ' . $dayName));
            }
        }

        $dailyQuota = $this->_basicHelper->disableSameDayBasedOnDailyQuota();

        if ($dailyQuota['disable'] === true) {
            $off_days = array_values(array_unique(array_merge($off_days, $dailyQuota['day_to_disable']), SORT_REGULAR));
        }

        $cutoff = $this->_basicHelper->disableDayBasedOnCutoff();
        if ($cutoff['status'] === true) {
            $off_days = array_values(array_unique(array_merge($off_days, $cutoff['day_to_disable']), SORT_REGULAR));
        }

        if ($isOrderProcessingTime) {
            if ($orderProcessingTime > 0) {
                $dayDiff = $orderProcessingTime;
            } else {
                $dayDiff = 0;
            }
        } else {
            $dayDiff = $this->_basicHelper->getDayDiff() ? $this->_basicHelper->getDayDiff() : 0;
        }

        $excludeHolidayFromProcessingDay = $this->excludeHolidayFromProcessingDay();
        if ($excludeHolidayFromProcessingDay) {
            $processingDateArray = [];
            $processingDayArray = [];
            for ($i = 0; $i < $dayDiff; $i++) {
                $modifiedDate = date('d-m-Y', strtotime('+' . $i . ' days'));
                $processingDateArray[] = $modifiedDate;
                $processingDayArray[] = date('w', strtotime($modifiedDate));
            }

            foreach ($processingDateArray as $processingDate) {
                if (in_array($processingDate, $off_days)) {
                    $dayDiff++;
                }
            }

            if ($dayOffs) {
                $processingDayArray = array_count_values($processingDayArray);
                foreach ($processingDayArray as $key => $processingDay) {
                    if (in_array($key, $dayOffsArray)) {
                        $dayDiff = $dayDiff + $processingDay;
                    }
                }
            }
        }

//                    if ($dayOffs && $dayDiff == 0 && !empty($dayArray)) {
//                        $off_days = array_merge($off_days, $dayArray);
//                    }
        $preSelectDateOption = $this->_basicHelper->preSelectDateOption();
        $dayDiff = $dayDiff + $preSelectDateOption; //Set pre selected date after including order processing time and considering holidays
        $selectedDate = date('d-m-Y', strtotime('+' . $dayDiff . ' days'));
        $i = 1;
        if (in_array($selectedDate, $off_days)) {
            while (in_array($selectedDate, $off_days)) {
                $selectedDate = date('d-m-Y', strtotime($selectedDate . '+' . $i . ' days'));
                $i++;
            }
        }

        return $selectedDate;
    }

    /**
     * Get quote object associated with cart. By default it is current customer session quote
     *
     * @return \Magento\Quote\Model\Quote
     */
    public function getQuoteData() {
        $quote = $this->checkoutSession->getQuote();
        $totalQty = $quote->getItemsQty();
        $orderProcessingTime = [];
        foreach ($quote->getAllVisibleItems() as $_item) {
            $productDetails = $this->getProduct($_item->getProductId());
//            $additionalCharge = $productDetails->getAdditionalDeliveryCharge();
            $orderProcessingTime[] = $productDetails->getOrderProcessingTime();
        }
        arsort($orderProcessingTime); //set array value in descending order
        $maxOrderProcessingTime = reset($orderProcessingTime); //using reset function get 1st element value of an array
        return $maxOrderProcessingTime;
    }

    public function getProduct($productId) {
        return $this->_productFactory->create()->load($productId);
    }

    public function getQuoteAddressData($addressId) {
        $addressItem = $this->addressItemCollectionFactory->create()->addFieldToFilter('quote_address_id', $addressId);
        if ($addressItem->getSize() > 0) {
            $orderProcessingTime = [];
            foreach ($addressItem->getData() as $item) {
                $productDetails = $this->getProduct($item['product_id']);
                $orderProcessingTime[] = $productDetails->getOrderProcessingTime();
            }
            arsort($orderProcessingTime); //set array value in descending order
            $maxOrderProcessingTime = reset($orderProcessingTime); //using reset function get 1st element value of an array
            return $maxOrderProcessingTime;
        }
    }

    public function allowProductWiseCharge() {
        return $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/allow_product_base_charge', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function sameDayDeliveryTimer() {
        return $this->_basicHelper->getConfigValue('deliverydate/deliverydate_configuration/end_same_day_delivery', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function excludeHolidayFromProcessingDay() {
        return $this->_basicHelper->getConfigValue('deliverydate/deliverydate_dayoff/exclude_holiday_from_processing', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
    }

    public function getQuoteProductCutOffData() {
        $quote = $this->checkoutSession->getQuote();
        $totalQty = $quote->getItemsQty();
        $CutOffTime = [];
        foreach ($quote->getAllVisibleItems() as $_item) {
            $productDetails = $this->getProduct($_item->getProductId());
            if ($productDetails->getCutOffTimeHours() != "" || $productDetails->getCutOffTimeHours() != NULL) {
                $hours = $productDetails->getCutOffTimeHours();
            } else {
                $hours = 00;
            }
            if ($productDetails->getCutOffTimeMinutes() != "" || $productDetails->getCutOffTimeMinutes() != NULL) {
                $minutes = $productDetails->getCutOffTimeMinutes();
            } else {
                $minutes = 00;
            }
            if ($productDetails->getCutOffTimeSeconds() != "" || $productDetails->getCutOffTimeSeconds() != NULL) {
                $seconds = $productDetails->getCutOffTimeSeconds();
            } else {
                $seconds = 00;
            }
            $CutOffTime[] = $hours . ',' . $minutes . ',' . $seconds;
        }
        if (!empty($CutOffTime)) {
            $times = [];
            foreach ($CutOffTime as $time) {
                $times[] = str_replace(',', ':', $time);
            }
            $times = array_map('strtotime', $times);

            $minCutOffTime = date('H:i:s', min($times));
            $minCutOffTime = str_replace(':', ',', $minCutOffTime);
        } else {
            $minCutOffTime = '00,00,00';
        }
        return $minCutOffTime;
    }

}
