<?php

namespace Biztech\Deliverydatepro\Model\Checkout;

use Biztech\Deliverydate\Helper\Data;
use Biztech\Deliverydatepro\Helper\Data as proHelper;
use Magento\Checkout\Api\Data\ShippingInformationInterface;
use Magento\Checkout\Model\ShippingInformationManagement;
use Magento\Quote\Model\QuoteRepository;
use Magento\Directory\Model\Currency;

class ShippingInformationManagementPlugin {

    protected $quoteRepository;
    protected $_bizHelper;

    /**
     * @param QuoteRepository $quoteRepository
     * @param Data $bizHelper
     */
    public function __construct(
    QuoteRepository $quoteRepository, Data $bizHelper, Currency $Currency, proHelper $proHelper
    ) {
        $this->quoteRepository = $quoteRepository;
        $this->_bizHelper = $bizHelper;
        $this->currency = $Currency;
        $this->proHelper = $proHelper;
    }

    /**
     * @param ShippingInformationManagement $subject
     * @param $cartId
     * @param ShippingInformationInterface $addressInformation
     */
    public function beforeSaveAddressInformation(
    ShippingInformationManagement $subject, $cartId, ShippingInformationInterface $addressInformation
    ) {
        $quote = $this->quoteRepository->getActive($cartId);
        $preSelect = false;
        $is_mandatory = $this->_bizHelper->getConfigValue('deliverydate/deliverydate_front_config/is_mandatory', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $isPreSelectDate = $this->_bizHelper->isPreSelectDate();
        if ($this->_bizHelper->getOnWhichPage() == 1 || $this->_bizHelper->getOnWhichPage() == 2) {
            $extAttributes = $addressInformation->getExtensionAttributes();
            $deliveryComments = $extAttributes->getShippingArrivalComments();
            $deliveryDate = $this->_bizHelper->getFormatedDeliveryDateToSave($extAttributes->getShippingArrivalDate());
            $deliverySlot = $extAttributes->getShippingArrivalSlot();
            $deliveryCharges = $extAttributes->getDeliveryCharges();
            $isSameDayCharge = false;
            $deliveryDateArray = [];
            $finalAdditionalCharge = 0;
            $quote->setSameDayCharges(0);

            if ($this->_bizHelper->applyAdditionalCharge()) {
                $dayWiseChargeType = $this->proHelper->dayWiseCharge();
                if ($dayWiseChargeType == 1) {
                    foreach ($quote->getAllVisibleItems() as $_item) {
                        if ($this->proHelper->allowProductWiseCharge()) {
                            $product = $this->proHelper->getProduct($_item->getProductId());
                            $additionalCharge = $product->getAdditionalDeliveryCharge();
                            $finalAdditionalCharge += $additionalCharge;
                        }
                        if ($_item->getBuyRequest()->getData('shipping_arrival_date') != "" || $_item->getBuyRequest()->getData('shipping_arrival_date') != NULL)
                            $deliveryDateArray[] = $_item->getBuyRequest()->getData('shipping_arrival_date');
                    }
                    if ($this->_bizHelper->isEnableAtProductPage()) {
                        $currentDate = date('d-m-Y');
                        if (in_array($currentDate, $deliveryDateArray)) {
                            $sameDayCharges = $this->_bizHelper->addSameDayCharges($currentDate);
                            if ($sameDayCharges['addCharge'] === true) {
                                $finalAdditionalCharge += $sameDayCharges['charges'];
                            }
                        }
                        $quote->setSameDayCharges($finalAdditionalCharge);
                        if ((!$is_mandatory && $isPreSelectDate) && ((count($deliveryDateArray) != count($quote->getAllVisibleItems())) || (count($quote->getAllVisibleItems()) != 0 && count($deliveryDateArray) == 0)))
                            $preSelect = true;
                    } else {
                        if ((!$is_mandatory && $isPreSelectDate) && ($this->_bizHelper->getOnWhichPage() == 1 && !$deliveryDate)) {
                            $preSelect = true;
                        } else {
                            $preSelect = false;
                            $sameDayCharges = $this->_bizHelper->addSameDayCharges($deliveryDate);
                            if ($sameDayCharges['addCharge'] === true) {
                                $finalAdditionalCharge += $sameDayCharges['charges'];
                            }
                            $quote->setSameDayCharges($finalAdditionalCharge);
                        }
                    }
                }
                if ($dayWiseChargeType == 2) {
                    foreach ($quote->getAllVisibleItems() as $_item) {
                        if ($this->proHelper->allowProductWiseCharge()) {
                            $product = $this->proHelper->getProduct($_item->getProductId());
                            $additionalCharge = $product->getAdditionalDeliveryCharge();
                            $finalAdditionalCharge += $additionalCharge;
                        }
                        $deliveryDateArray[] = $_item->getBuyRequest()->getData('shipping_arrival_date');
                    }
                    if ($this->_bizHelper->isEnableAtProductPage()) {
                        foreach ($deliveryDateArray as $dateValue) {
                            $weekDayCharges = $this->proHelper->addWeekDayCharges($dateValue);
                            if ($weekDayCharges['addCharge'] === true) {
                                $finalAdditionalCharge += $weekDayCharges['charges'];
                            }
                        }
                        $quote->setSameDayCharges($finalAdditionalCharge);
                        if ((!$is_mandatory && $isPreSelectDate) && ((count($deliveryDateArray) != count($quote->getAllVisibleItems())) || (count($quote->getAllVisibleItems()) != 0 && count($deliveryDateArray) == 0)))
                            $preSelect = true;
                    } else {
                        if ((!$is_mandatory && $isPreSelectDate) && ($this->_bizHelper->getOnWhichPage() == 1 && !$deliveryDate) || ($this->_bizHelper->getOnWhichPage() == 3 && $quote->getShippingArrivalDate() == NULL)) {
                            $preSelect = true;
                        } else {
                            $preSelect = false;
                            $weekDayCharges = $this->proHelper->addWeekDayCharges($deliveryDate);
                            if ($weekDayCharges['addCharge'] === true) {
                                $finalAdditionalCharge += $weekDayCharges['charges'];
                            }
                            $quote->setSameDayCharges($finalAdditionalCharge);
                        }
                    }
                }
            }
            $quote->setShippingArrivalComments($deliveryComments);
            $quote->setShippingArrivalDate($deliveryDate);
            $quote->setShippingArrivalSlot($deliverySlot);
            $callBeforeDelivery = (int) $extAttributes->getCallBeforeDelivery();
            $quote->setCallBeforeDelivery($callBeforeDelivery);
            if ($deliveryCharges == "" | $deliveryCharges == null) {
                $deliveryCharges = (float) 0;
            } else {
                $deliveryDateView = $this->_bizHelper->getDeliveryDateView();
                if ($deliveryDateView == 1) {
                    $deliveryCharges = $this->currency->format($deliveryCharges, ['display' => \Magento\Framework\Currency::NO_SYMBOL], false);
                } else {
                    $deliveryCharges = (float) $deliveryCharges;
                }
            }
            $quote->setDeliveryCharges($deliveryCharges);
        }
        if ((!$is_mandatory && $isPreSelectDate) && ($this->_bizHelper->getOnWhichPage() == 3 && $quote->getShippingArrivalDate() == NULL)) {
            $preSelect = true;
        }
        if ($preSelect) {
            $checkDayOff = false;
            $off_days = [];
            $nonworking_days = $this->_bizHelper->getFormattedNonWorkingDays();
            $nonworking_period = $this->_bizHelper->getFormattedNonWorkingPeriod();


            $isOrderProcessingTime = false;
            $proHelper = $this->proHelper;
            $deliveryOption = $proHelper->deliveryOption();
            if ($deliveryOption == 2) {
                $isOrderProcessingTime = true;
                $orderProcessingTime = $proHelper->getQuoteData();
            }

            if ($proHelper->excludeHolidays() == 1) {
                $holiday = $proHelper->getEnableHolidays();
                $annualNotRepeatHoliday = [];
                $annualRepeatHoliday = [];
                if (isset($holiday['annualNotRepeatHoliday'])) {
                    $annualNotRepeatHoliday = (array) $holiday['annualNotRepeatHoliday'];
                }
                if (isset($holiday['annualRepeatHoliday'])) {
                    $annualRepeatHoliday = (array) $holiday['annualRepeatHoliday'];
                }
                $off_days = array_merge((array) $nonworking_days, (array) $nonworking_period, $annualNotRepeatHoliday, $annualRepeatHoliday);
            } else {
                $off_days = array_merge((array) $nonworking_days, (array) $nonworking_period);
            }

            $dailyQuota = $this->_bizHelper->disableSameDayBasedOnDailyQuota();

            if ($dailyQuota['disable'] === true) {
                $off_days = array_values(array_unique(array_merge($off_days, $dailyQuota['day_to_disable']), SORT_REGULAR));
            }

            $cutoff = $this->_bizHelper->disableDayBasedOnCutoff();
            if ($cutoff['status'] === true) {
                $off_days = array_values(array_unique(array_merge($off_days, $cutoff['day_to_disable']), SORT_REGULAR));
            }

            if ($isOrderProcessingTime) {
                if ($orderProcessingTime > 0) {
                    $dayDiff = $orderProcessingTime;
                } else {
                    $dayDiff = 0;
                }
            } else {
                $dayDiff = $this->_bizHelper->getDayDiff() ? $this->_bizHelper->getDayDiff() : 0;
            }


            $excludeHolidayFromProcessingDay = $proHelper->excludeHolidayFromProcessingDay();
            $dayOffs = $this->_bizHelper->getDayOffs();
            if ($excludeHolidayFromProcessingDay) {
                $processingDateArray = [];
                $processingDayArray = [];
                for ($i = 0; $i < $dayDiff; $i++) {
                    $modifiedDate = date('d-m-Y', strtotime('+' . $i . ' days'));
                    $processingDateArray[] = $modifiedDate;
                    $processingDayArray[] = date('w', strtotime($modifiedDate));
                }

                foreach ($processingDateArray as $processingDate) {
                    if (in_array($processingDate, $off_days)) {
                        $dayDiff++;
                    }
                }

                $dayOffsArray = explode(',', $dayOffs);
                $processingDayArray = array_count_values($processingDayArray);

                foreach ($processingDayArray as $key => $processingDay) {
                    if (in_array($key, $dayOffsArray)) {
                        $dayDiff = $dayDiff + $processingDay;
                    }
                }
            }
            if ($dayDiff == 0) {
                $checkDayOff = true;
                //get weekday selected then create array of that day and date
                if (isset($dayOffs) && $dayOffs != '') {
                    $dayOffsArray = explode(',', $dayOffs);
                    $dayArray = [];
                    foreach ($dayOffsArray as $k => $v) {
                        if(!empty($v)){
                            $dayName = $this->_bizHelper->dayName($v);
                            $dayArray[] = date('d-m-Y', strtotime($dayName));
                            $dayArray[] = date('d-m-Y', strtotime('next ' . $dayName));
                            $dayArray[] = date('d-m-Y', strtotime('second ' . $dayName));
                        }
                    }
                }
            }

            $preSelectDateOption = $this->_bizHelper->preSelectDateOption();
            $dayDiff = $dayDiff + $preSelectDateOption; //Set pre selected date after including order processing time and considering holidays
            $selectedDate = date('d-m-Y', strtotime('+' . $dayDiff . ' days'));
            $i = 1;
            if (in_array($selectedDate, $off_days)) {
                while (in_array($selectedDate, $off_days)) {
                    $selectedDate = date('d-m-Y', strtotime($selectedDate . '+' . $i . ' days'));
                    $i++;
                }
            }

            //if order processing time is 0 and weekday selected then check below condition
            if (!empty($dayArray) && $checkDayOff) {
                $i = 1;
                if (in_array($selectedDate, $dayArray)) {
                    while (in_array($selectedDate, $dayArray)) {
                        $selectedDate = date('d-m-Y', strtotime($selectedDate . '+' . $i . ' days'));
                        $i++;
                    }
                }
            }
            $quote->setShippingArrivalDate($selectedDate);
        }
    }

}
